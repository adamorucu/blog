{
  
    
        "post0": {
            "title": "Learn Logistic Regression by Implementing in NumPy",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt from IPython.display import Code %matplotlib inline import seaborn as sns sns.set_style(&#39;darkgrid&#39;) from sklearn import datasets from sklearn.model_selection import train_test_split %load_ext autoreload %autoreload 2 . . In the second post in this series we will learn how a logistic regression classfier works and implement it in NumPy. This time we will use the Penguin type dataset, where we will try guess one of two penguin species from some of their attributes. . p2data = &quot;https://raw.githubusercontent.com/mcnakhaee/palmerpenguins/master/palmerpenguins/data/penguins.csv&quot; penguins = pd.read_csv(p2data).dropna() peng_df = penguins[penguins[&#39;sex&#39;]==&#39;female&#39;][penguins[&#39;species&#39;] != &#39;Chinstrap&#39;][[&#39;species&#39;, &#39;bill_length_mm&#39;, &#39;bill_depth_mm&#39;, &#39;flipper_length_mm&#39;, &#39;flipper_length_mm&#39;]] peng_df . &lt;ipython-input-20-daf56e11f5e1&gt;:3: UserWarning: Boolean Series key will be reindexed to match DataFrame index. peng_df = penguins[penguins[&#39;sex&#39;]==&#39;female&#39;][penguins[&#39;species&#39;] != &#39;Chinstrap&#39;][[&#39;species&#39;, &#39;bill_length_mm&#39;, &#39;bill_depth_mm&#39;, &#39;flipper_length_mm&#39;, &#39;flipper_length_mm&#39;]] . species bill_length_mm bill_depth_mm flipper_length_mm flipper_length_mm . 1 Adelie | 39.5 | 17.4 | 186.0 | 186.0 | . 2 Adelie | 40.3 | 18.0 | 195.0 | 195.0 | . 4 Adelie | 36.7 | 19.3 | 193.0 | 193.0 | . 6 Adelie | 38.9 | 17.8 | 181.0 | 181.0 | . 12 Adelie | 41.1 | 17.6 | 182.0 | 182.0 | . ... ... | ... | ... | ... | ... | . 264 Gentoo | 43.5 | 15.2 | 213.0 | 213.0 | . 266 Gentoo | 46.2 | 14.1 | 217.0 | 217.0 | . 270 Gentoo | 47.2 | 13.7 | 214.0 | 214.0 | . 272 Gentoo | 46.8 | 14.3 | 215.0 | 215.0 | . 274 Gentoo | 45.2 | 14.8 | 212.0 | 212.0 | . 131 rows × 5 columns . Important change that we have to make is to encode the names of species as integers for our model to work. We will change Adelie to $-1$ and Gentoo to $1$. You will see later why we chose these numbers in particular. . peng_df[&#39;species&#39;] = peng_df[&#39;species&#39;].map({&#39;Adelie&#39;: -1, &#39;Gentoo&#39;: 1}) peng_df . species bill_length_mm bill_depth_mm flipper_length_mm flipper_length_mm . 1 1 | 39.5 | 17.4 | 186.0 | 186.0 | . 2 1 | 40.3 | 18.0 | 195.0 | 195.0 | . 4 1 | 36.7 | 19.3 | 193.0 | 193.0 | . 6 1 | 38.9 | 17.8 | 181.0 | 181.0 | . 12 1 | 41.1 | 17.6 | 182.0 | 182.0 | . ... ... | ... | ... | ... | ... | . 264 2 | 43.5 | 15.2 | 213.0 | 213.0 | . 266 2 | 46.2 | 14.1 | 217.0 | 217.0 | . 270 2 | 47.2 | 13.7 | 214.0 | 214.0 | . 272 2 | 46.8 | 14.3 | 215.0 | 215.0 | . 274 2 | 45.2 | 14.8 | 212.0 | 212.0 | . 131 rows × 5 columns . Logistic Regression . class LogisticRegressionClassifier: &quot;&quot;&quot;Logistic regression classifier&quot;&quot;&quot; def __init__(self, r=0.5): self.r = r def fit(self, X, y, iters=500, lr=0.01): &quot;&quot;&quot;Fits the training data&quot;&quot;&quot; self.y = y self.X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) self.m, self.n = X.shape self.Theta = np.random.randn(self.n+1, 1) loss_prime = lambda x, y, theta: 1/self.m * (self._sigmoid(x @ theta) - y).T @ x self._gradient_descent(iters=iters, loss_prime=loss_prime, lr=lr) def predict(self, X): &quot;&quot;&quot;Makes prediction&quot;&quot;&quot; X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) return np.array([[1 if res &gt; self.r else -1] for res in self._sigmoid(X @ self.Theta)]) def _sigmoid(self, Z): &quot;&quot;&quot;Sigmoid function&quot;&quot;&quot; return np.exp(Z) / (1 + np.exp(Z)) def _gradient_descent(self, iters, loss_prime, lr): &quot;&quot;&quot;Gradient descent algorithm&quot;&quot;&quot; for i in range(iters): grad = loss_prime(self.X, self.y, self.Theta) self.Theta -= lr * grad.T .",
            "url": "https://adamorucu.github.io/blog/machine%20learning/numpy/2020/11/22/Learn-Logistic-Regression-by-Implementing-in-NumPy.html",
            "relUrl": "/machine%20learning/numpy/2020/11/22/Learn-Logistic-Regression-by-Implementing-in-NumPy.html",
            "date": " • Nov 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Learn Linear Regression by Implementing in NumPy",
            "content": "Following the principle: . The best way to learn is by doing. . In this post we will learn how linear regression works and implement it at the same time. This is the first post of a series so if you end up learning something usefull don&#39;t stop and continue with the next ones. The whole post is a Jupyter Notebook and was created using Fast Pages so if you&#39;d like to replicate the steps you can do so by using the above links for several different methods. . #hide_output import numpy as np import pandas as pd import matplotlib.pyplot as plt from IPython.display import Code %matplotlib inline import seaborn as sns sns.set_style(&#39;darkgrid&#39;) from sklearn import datasets from sklearn.model_selection import train_test_split %load_ext autoreload %autoreload 2 . . About the data . Data that we will be using to train and test the model is the Boston Housing Dataset. This dataset contains information on housing in the city of Boston and we will use it to try to predict value of some owner-occupied homes. . X, y = datasets.load_boston(return_X_y=True) X = pd.DataFrame(data=X, columns=[&#39;CRIM&#39;, &#39;ZN&#39;, &#39;INDUS&#39;, &#39;CHAS&#39;, &#39;NOX&#39;, &#39;RM&#39;, &#39;AGE&#39;, &#39;DIS&#39;, &#39;RAD&#39;, &#39;TAX&#39;, &#39;PTRATIO&#39;, &#39;B&#39;, &#39;LSTAT&#39;]) X_train, X_test, y_train, y_test = train_test_split(X[&#39;AGE&#39;].to_numpy().reshape(-1, 1), y, test_size=0.33, random_state=42) . . The data can be viewed below. Here every column represents an attribute of the data, like age, crime, or patio-ratio. Although for this project only one attribute will be uses to ease the visualisation - namely age of the property. . temp = X; temp[&#39;target&#39;] = y; temp.head() . . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B LSTAT target . 0 0.00632 | 18.0 | 2.31 | 0.0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1.0 | 296.0 | 15.3 | 396.90 | 4.98 | 24.0 | . 1 0.02731 | 0.0 | 7.07 | 0.0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2.0 | 242.0 | 17.8 | 396.90 | 9.14 | 21.6 | . 2 0.02729 | 0.0 | 7.07 | 0.0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2.0 | 242.0 | 17.8 | 392.83 | 4.03 | 34.7 | . 3 0.03237 | 0.0 | 2.18 | 0.0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3.0 | 222.0 | 18.7 | 394.63 | 2.94 | 33.4 | . 4 0.06905 | 0.0 | 2.18 | 0.0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3.0 | 222.0 | 18.7 | 396.90 | 5.33 | 36.2 | . Our Goal . As stated our goal is to predict values of given houses to be as close to the real value as possible. Below an example can be viewed, which was created using scikit-learn the table presents predicted and true values for 5 housing units. We will be creating a similar model on our own. . from sklearn.linear_model import LinearRegression as skLinReg clf = skLinReg().fit(X_train, y_train, ) pd.DataFrame(data=[clf.predict(X_test)[:5], y_test[:5]], index=[&#39;Prediction&#39;, &#39;True&#39;]) . 0 1 2 3 4 . Prediction 21.133509 | 27.338643 | 19.351957 | 30.380613 | 20.200315 | . True 23.600000 | 32.400000 | 13.600000 | 22.800000 | 16.100000 | . Let&#39;s Get to It . Although the linear regression model is fairly simple to understand while making predictions, there is some math involved in the process of training the model. So without further ado, let&#39;s begin. . . Prediction making in linear regression can be basically stated as drawing a line through the available data so that it represents the data as accurately as possible. We do that ofcourse by creating an equation that represents a line, e.g. $3x + 4 = y$. This equation says that if our input data point is a $2$ the prediction made will be $10$. The input data can of course have more then one attribute for a single data point. In such a case the equation can be written as follows; $ theta_1 * x_1 + theta_2 * x_2 + theta_0 = y$. Theta, being the weight of each attribute. . Since we will not get only one data point but much more, it will be usefull to represent it with a matrix, where each column of $X$ is an attribute, each row a seperate data point that is available to us. Thetas and the output y can represented as two vectors in such a case. This will result in the below equation. $$X cdot theta = y$$ Pretty simple formula right? So, let&#39;s code it. . def predict(self, X, add_intercept=True): &quot;&quot;&quot;Makes predictions on the given data&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) return X @ self.Theta . Above is the code-snippet that does exactly what we have said so far. Returns an array of predictions by multiplying each row (data point) with theta (weight). You may have realised the two extra lines here. They add to our matrix a column of 1s which are called the intercept they will help us add the $ theta_0$ weight. . . Now since we now how to make predictions once we have our thetas defined let&#39;s learn how we actually choose the thetas that best fir our data. We will see how this can be done, using two different methods. Let&#39;s start with gradient descent. The general idea here is that; we calculate the error our model is making at step by step try to minimize it. . That said let&#39;s define our error (loss) function. Since we try to draw a line so that the distance to the data points is as small as possible, our function will do just that; calculate the average distance to the data points. Instead of getting the absoloute value of the distances we will sqaure it. This is done so the values that are a little off will not affect the model very much, but values that will end up being very far away from the line that we drew increase the error even more. $$ frac{ sum_{i=0}^n( X_i cdot theta - y_i)}{2n}$$ You probably see an extra 2 in the denominator, it is just to help us in further calculation, you shouldn&#39;t worry about it very much. . def fit(self, X, y, lamb=0, add_intercept=True, iters=20, lr=1e-6): &quot;&quot;&quot;Fits the training data using gradient descent&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) self.n, self.p = X.shape self.X = X self.y = np.reshape(y, (len(y), 1)) self.Theta = np.random.randn(self.p, 1) loss_prime = lambda x, y, theta: (x @ theta - y).T @ x loss = lambda x, y, theta: 1/(2*self.n) * np.sum(np.square(X @ theta - y)) self._gradient_descent(iters=iters, loss_prime=loss_prime, lr=lr, loss=loss) . Since we now our loss function we can move on to the gradient descent. Since we try to minimize the value of the loss function, we can understand what values of thetas make it smaller by calculating the derivate of the loss function we just defined. We is the following: $$(X cdot theta - y)&#39; cdot X$$ We can move towards a smaller error by substracting this derivative from the theta that we used to calculate it. And that&#39;s the gradient descent algorithm. One addition is that instead of just substracting the derivative we first multiply it by a small number (learning rate) so we don&#39;t take too big steps and just little by little go to the right direction. . def _gradient_descent(self, iters, loss_prime, lr, loss=None): &quot;&quot;&quot;Gradient descent algorithm&quot;&quot;&quot; for i in range(iters): grad = loss_prime(self.X, self.y, self.Theta) self.Theta -= lr * grad.T if loss != None: self.loss.append(loss(self.X, self.y, self.Theta)) . That was all! If you&#39;d like to see what we ended up with click the button below. Now we will move on to testing our model. . class LinearRegression: &quot;&quot;&quot;Linear regression algorithm&quot;&quot;&quot; def __init__(self): self.loss = [] def fit(self, X, y, lamb=0, add_intercept=True, iters=2000, lr=1e-8): &quot;&quot;&quot;Fits the training data using normal equation&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) self.n, self.p = X.shape self.X = X self.y = np.reshape(y, (len(y), 1)) self.Theta = np.random.randn(self.p, 1) *5 print(self.Theta) loss_prime = lambda x, y, theta: (x @ theta - y).T @ x loss = lambda x, y, theta: 1/(2*self.n) * np.sum(np.square(X @ theta - y)) self._gradient_descent(iters=iters, loss_prime=loss_prime, lr=lr, loss=loss) def predict(self, X, add_intercept=True): &quot;&quot;&quot;Makes predictions on the given data&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) return X @ self.Theta def _gradient_descent(self, iters, loss_prime, lr, loss=None): &quot;&quot;&quot;Gradient descent algorithm&quot;&quot;&quot; for i in range(iters): grad = loss_prime(self.X, self.y, self.Theta) self.Theta -= lr * grad.T if loss != None: self.loss.append(loss(self.X, self.y, self.Theta)) . . Results . You may have realised that we preset values for learning-rate and the number of iterations for gradient descent they are set to values that work, but I would encourage to play around with them. Anyways if we run our model with those parameters here are the values that we obtain. Maybe not as good as the once obtained by scikit-learn but there still seems to have the correct correlation. . LinReg = LinearRegression() LinReg.fit(X_train, y_train) print(&#39;Thetas we ended up with: n&#39;,LinReg.Theta) pd.DataFrame(data=[LinReg.predict(X_test)[:5,0], y_test[:5]], index=[&#39;Prediction&#39;, &#39;True&#39;]) . . [[-2.86661358] [-5.86704893]] Thetas we ended up with: [[-2.75715206] [ 0.30358352]] . 0 1 2 3 4 . Prediction 22.774222 | 7.230746 | 27.2369 | -0.389201 | 25.111815 | . True 23.600000 | 32.400000 | 13.6000 | 22.800000 | 16.100000 | . Comparison . Our error (mean squared error) compared to scikit-learn&#39;s. . from sklearn.metrics import mean_squared_error print(&#39;Our: &#39;, mean_squared_error(LinReg.predict(X_test), y_test), &#39; nSklearns: &#39;, mean_squared_error(clf.predict(X_test), y_test)) . . Our: 228.609031032808 Sklearns: 64.45241584915276 . Learning . But the most interesting part is to see how our algorithm learns. Below you can see how our error got smaller with every iteration of the gradient descent algortihm. . plt.plot(LinReg.loss);plt.show() . And here is the visualisation of the result we obtained and comparison to the result using sklearn. . LinReg = LinearRegression() sk = skLinReg() LinReg.fit(X_train, y_train) sk.fit(X_train, y_train) plt.scatter(X_test, y_test) plt.plot(X_test, LinReg.predict(X_test), &#39;g&#39;) plt.plot(X_test, sk.predict(X_test), &#39;m&#39;) plt.legend([&#39;Our&#39;, &#39;Sklearns&#39;]) plt.show() . . . #collapse_hide from matplotlib import animation fig, ax = plt.subplots() fig.set_tight_layout(True) LinReg2 = LinearRegression() LinReg2.fit(X_train, y_train, iters=0) sk = skLinReg() sk.fit(X_train, y_train) ax.scatter(X_test, y_test) ax.plot(X_test, sk.predict(X_test), &#39;m-&#39;) line, = ax.plot(X_test, np.hstack((X_test, np.ones((X_test.shape[0], 1), dtype=X_test.dtype))).dot(LinReg2.Theta), &#39;r-&#39;, linewidth=2) ax.legend((&#39;Sklearns&#39;, &#39;Our&#39;)) Writer = animation.writers[&#39;pillow&#39;] writer = Writer(fps=15, metadata=dict(artist=&#39;Me&#39;), bitrate=1800) def init(): line.set_data([], []) return line, def animate(i): LinReg2.fit(X_train, y_train, iters=250) line.set_data(X_test, LinReg2.predict(X_test)) return line, anim = animation.FuncAnimation(fig, animate, init_func=init, frames=200, interval=200, repeat_delay=1000, blit=True) anim.save(&#39;gif/linreg.gif&#39;, writer=writer) . . . Now, I had said that we will see two algorithm to find values for theta. The first one was gradient descent. The second is called the normal equation. This equation is possible because linear regression is a quite simple idea, so smart people have found a formula that makes the learning process unnecessary and just gives you the correct answer. If you interested in the proof; do go online, I will not do it here. Anyways, here is the equation: $$(X&#39; cdot X)^{-1} cdot X&#39; cdot y$$ Obviously this equation will not work for every situation. Since you need to invert a matrix you may end up with matricees of data where it is not possible to do so. . def fit(self, X, y, lamb=0, add_intercept=True, iters=100, lr=3e-8): &quot;&quot;&quot;Fits the training data using normal equation&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) n, p = X.shape self.X = X self.y = np.reshape(y, (len(y), 1)) self.Theta = np.linalg.inv(self.X.T @ self.X) @ self.X.T @ self.y . As you can see using this equation we ended up with the same error, so with the same theta (weight) that scikit-learn has found. . class LinearRegression: &quot;&quot;&quot;Linear regression algorithm&quot;&quot;&quot; def __init__(self): self.loss = [] def fit(self, X, y, lamb=0, add_intercept=True, iters=100, lr=3e-8): &quot;&quot;&quot;Fits the training data using normal equation&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) n, p = X.shape self.X = X self.y = np.reshape(y, (len(y), 1)) self.Theta = np.linalg.inv(self.X.T @ self.X) @ self.X.T @ self.y def predict(self, X, add_intercept=True): &quot;&quot;&quot;Makes predictions on the given data&quot;&quot;&quot; if add_intercept: X = np.column_stack((np.ones((X.shape[0], 1), dtype=X.dtype), X)) return X @ self.Theta LinReg = LinearRegression() LinReg.fit(X_train, y_train) print(LinReg.Theta) from sklearn.metrics import mean_squared_error print(&#39;My: &#39;, mean_squared_error(LinReg.predict(X_test), y_test), &#39; nSklearns: &#39;, mean_squared_error(clf.predict(X_test), y_test)) . . [[31.32592649] [-0.12119402]] My: 64.45241584915267 Sklearns: 64.45241584915276 .",
            "url": "https://adamorucu.github.io/blog/machine%20learning/numpy/2020/10/26/Learn-Linear-Regression-by-Implementing-In-NumPy.html",
            "relUrl": "/machine%20learning/numpy/2020/10/26/Learn-Linear-Regression-by-Implementing-In-NumPy.html",
            "date": " • Oct 26, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://adamorucu.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://adamorucu.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This blog is maintained by Adam Orucu. .",
          "url": "https://adamorucu.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://adamorucu.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}