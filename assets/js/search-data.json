{
  
    
        "post0": {
            "title": "Learn Linear Regression by Implementing in NumPy",
            "content": "Following the principle: . The best way to learn is by doing. . In this post we will learn how linear regression works and implement it at the same time. This is the first post of a series so if you end up learning something usefull don&#39;t stop and continue with the next ones. . import numpy as np import pandas as pd import matplotlib.pyplot as plt from IPython.display import Code %matplotlib inline import seaborn as sns sns.set_style(&#39;darkgrid&#39;) from sklearn import datasets from sklearn.model_selection import train_test_split %load_ext autoreload %autoreload 2 . . About the data . Data that we will be using is the Boston Housing Dataset which .. . X, y = datasets.load_boston(return_X_y=True) X = pd.DataFrame(data=X, columns=[&#39;CRIM&#39;, &#39;ZN&#39;, &#39;INDUS&#39;, &#39;CHAS&#39;, &#39;NOX&#39;, &#39;RM&#39;, &#39;AGE&#39;, &#39;DIS&#39;, &#39;RAD&#39;, &#39;TAX&#39;, &#39;PTRATIO&#39;, &#39;B&#39;, &#39;LSTAT&#39;]) X_train, X_test, y_train, y_test = train_test_split(X[&#39;AGE&#39;].to_numpy().reshape(-1, 1), y, test_size=0.33, random_state=42) . . asd . X.head() . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B LSTAT . 0 0.00632 | 18.0 | 2.31 | 0.0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1.0 | 296.0 | 15.3 | 396.90 | 4.98 | . 1 0.02731 | 0.0 | 7.07 | 0.0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2.0 | 242.0 | 17.8 | 396.90 | 9.14 | . 2 0.02729 | 0.0 | 7.07 | 0.0 | 0.469 | 7.185 | 61.1 | 4.9671 | 2.0 | 242.0 | 17.8 | 392.83 | 4.03 | . 3 0.03237 | 0.0 | 2.18 | 0.0 | 0.458 | 6.998 | 45.8 | 6.0622 | 3.0 | 222.0 | 18.7 | 394.63 | 2.94 | . 4 0.06905 | 0.0 | 2.18 | 0.0 | 0.458 | 7.147 | 54.2 | 6.0622 | 3.0 | 222.0 | 18.7 | 396.90 | 5.33 | . Our Goal . from sklearn.linear_model import LinearRegression as skLinReg clf = skLinReg().fit(X_train, y_train) pd.DataFrame(data=[clf.predict(X_test)[:5], y_test[:5]], index=[&#39;Prediction&#39;, &#39;True&#39;]) . 0 1 2 3 4 . Prediction 21.133509 | 27.338643 | 19.351957 | 30.380613 | 20.200315 | . True 23.600000 | 32.400000 | 13.600000 | 22.800000 | 16.100000 | . Linear Regression . Linear regression is the simplest machine learning algorithm to learn. ... . def predict(self, X): X = np.hstack((X, np.ones((X.shape[0], 1), dtype=X.dtype))) return X.dot(self.weights) . learning afdkadjfljasd dskf jadslfj sd . def fit(self, X, y, iters=5000, lr=0.0001): self.n = X.shape[1] self.m = X.shape[0] self.weights = np.random.rand(self.n+1,1) if not &#39;weights&#39; in dir(self) else self.weights self.gradient_descent(X, y, iters, lr) . Gradient Descent . Greasdasdf asdf asdf asdf . def gradient_descent(self, X, y, iters, lr): X = np.hstack((X, np.ones((X.shape[0], 1), dtype=X.dtype))) y = np.reshape(y, (len(y),1)) for i in range(iters): gradient = (X.dot(self.weights) - y).transpose().dot(X) self.weights = self.weights - (lr * 1/self.m * gradient.transpose()) self.loss.append(1/(2*self.m) * np.sum(np.square(X.dot(self.weights) - y))) . If you&#39;d like to see the entire object you see it by clicking the button below. . class LinearRegression: def __init__(self): self.loss = [] def fit(self, X, y, iters=50000, lr=3e-4): self.n = X.shape[1] self.m = X.shape[0] self.weights = np.random.rand(self.n+1,1) if not &#39;weights&#39; in dir(self) else self.weights self.gradient_descent(X, y, iters, lr) # def cost(self, X, y): # pred = self.predict(X) # return 1/len(pred) * (pred - y)**2 def predict(self, X): X = np.hstack((X, np.ones((X.shape[0], 1), dtype=X.dtype))) return X.dot(self.weights) def gradient_descent(self, X, y, iters, lr): X = np.hstack((X, np.ones((X.shape[0], 1), dtype=X.dtype))) y = np.reshape(y, (len(y),1)) for i in range(iters): gradient = (X.dot(self.weights) - y).transpose().dot(X) self.weights = self.weights - (lr * 1/self.m * gradient.transpose()) self.loss.append(1/(2*self.m) * np.sum(np.square(X.dot(self.weights) - y))) . . Results . LinReg = LinearRegression() LinReg.fit(X_train, y_train) pd.DataFrame(data=[LinReg.predict(X_test)[:5,0], y_test[:5]], index=[&#39;Prediction&#39;, &#39;True&#39;]) . . 0 1 2 3 4 . Prediction 21.313305 | 25.13514 | 20.216021 | 27.008735 | 20.738537 | . True 23.600000 | 32.40000 | 13.600000 | 22.800000 | 16.100000 | . Learning . plt.plot(LinReg.loss);plt.show() . Comparison . from sklearn.metrics import mean_squared_error print(&#39;Our: &#39;, mean_squared_error(LinReg.predict(X_test), y_test), &#39; nSklearns: &#39;, mean_squared_error(clf.predict(X_test), y_test)) . . Our: 65.40209298303503 Sklearns: 64.45241584915276 . LinReg = LinearRegression() sk = skLinReg() LinReg.fit(X_train, y_train) sk.fit(X_train, y_train) plt.scatter(X_test, y_test) plt.plot(X_test, LinReg.predict(X_test), &#39;g&#39;) plt.plot(X_test, sk.predict(X_test), &#39;m&#39;) plt.legend([&#39;Our&#39;, &#39;Sklearns&#39;]) plt.show() . . . #collapse_hide from matplotlib import animation fig, ax = plt.subplots() fig.set_tight_layout(True) LinReg2 = LinearRegression() LinReg2.fit(X_train, y_train, iters=0) sk = skLinReg() sk.fit(X_train, y_train) ax.scatter(X_test, y_test) ax.plot(X_test, sk.predict(X_test), &#39;m-&#39;) line, = ax.plot(X_test, np.hstack((X_test, np.ones((X_test.shape[0], 1), dtype=X_test.dtype))).dot(LinReg2.weights), &#39;r-&#39;, linewidth=2) ax.legend((&#39;Sklearns&#39;, &#39;Our&#39;)) Writer = animation.writers[&#39;pillow&#39;] writer = Writer(fps=15, metadata=dict(artist=&#39;Me&#39;), bitrate=1800) def init(): line.set_data([], []) return line, def animate(i): LinReg2.fit(X_train, y_train, iters=250) line.set_data(X_test, LinReg2.predict(X_test)) return line, anim = animation.FuncAnimation(fig, animate, init_func=init, frames=200, interval=200, repeat_delay=1000, blit=True) anim.save(&#39;gif/linreg.gif&#39;, writer=writer) . . .",
            "url": "https://posterrieri.github.io/blog/machine%20learning/numpy/2020/10/26/Learn-Linear-Regression-by-Implementing-In-NumPy.html",
            "relUrl": "/machine%20learning/numpy/2020/10/26/Learn-Linear-Regression-by-Implementing-In-NumPy.html",
            "date": " • Oct 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://posterrieri.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://posterrieri.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This blog is maintained by Adam Orucu. .",
          "url": "https://posterrieri.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://posterrieri.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}